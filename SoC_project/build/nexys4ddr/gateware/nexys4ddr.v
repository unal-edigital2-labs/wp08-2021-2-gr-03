// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : nexys4ddr.v
// Device     : xc7a100t-CSG324-1
// LiteX sha1 : 02fe32bd
// Date       : 2022-02-07 15:16:14
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module nexys4ddr (
	output reg  serial_tx,
	input  wire serial_rx,
	input  wire iR,
	input  wire iRC,
	input  wire iC,
	input  wire iLC,
	input  wire iL,
	input  wire clk,
	input  wire cpu_reset,
	output wire led0,
	output wire led1,
	output wire led2,
	output wire led3,
	output wire led4,
	input  wire sw0,
	input  wire sw1,
	input  wire sw2,
	input  wire sw3,
	input  wire sw4,
	input  wire sw5,
	input  wire sw6,
	input  wire sw7,
	input  wire btnc,
	input  wire btnr,
	input  wire btnl,
	output wire display_segment0,
	output wire display_segment1,
	output wire display_segment2,
	output wire display_segment3,
	output wire display_segment4,
	output wire display_segment5,
	output wire display_segment6,
	output wire display_segment7,
	output wire display_digit0,
	output wire display_digit1,
	output wire display_digit2,
	output wire display_digit3,
	output wire display_digit4,
	output wire display_digit5,
	output wire display_digit6,
	output wire display_digit7,
	output reg  ledRGB1_r,
	output reg  ledRGB1_g,
	output reg  ledRGB1_b,
	output reg  ledRGB2_r,
	output reg  ledRGB2_g,
	output reg  ledRGB2_b,
	output wire vga_red0,
	output wire vga_red1,
	output wire vga_red2,
	output wire vga_red3,
	output wire vga_green0,
	output wire vga_green1,
	output wire vga_green2,
	output wire vga_green3,
	output wire vga_blue0,
	output wire vga_blue1,
	output wire vga_blue2,
	output wire vga_blue3,
	output wire hsync,
	output wire vsync
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
wire bus_error;
reg  [31:0] bus_errors = 32'd0;
wire reset;
reg  [31:0] interrupt = 32'd0;
wire [29:0] ibus_adr;
wire [31:0] ibus_dat_w;
wire [31:0] ibus_dat_r;
wire [3:0] ibus_sel;
wire ibus_cyc;
wire ibus_stb;
wire ibus_ack;
wire ibus_we;
wire [2:0] ibus_cti;
wire [1:0] ibus_bte;
wire ibus_err;
wire [29:0] dbus_adr;
wire [31:0] dbus_dat_w;
wire [31:0] dbus_dat_r;
wire [3:0] dbus_sel;
wire dbus_cyc;
wire dbus_stb;
wire dbus_ack;
wire dbus_we;
wire [2:0] dbus_cti;
wire [1:0] dbus_bte;
wire dbus_err;
reg  [31:0] vexriscv = 32'd0;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg  ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg  ram_bus_err = 1'd0;
wire [12:0] adr;
wire [31:0] dat_r;
wire [29:0] interface0_ram_bus_adr;
wire [31:0] interface0_ram_bus_dat_w;
wire [31:0] interface0_ram_bus_dat_r;
wire [3:0] interface0_ram_bus_sel;
wire interface0_ram_bus_cyc;
wire interface0_ram_bus_stb;
reg  interface0_ram_bus_ack = 1'd0;
wire interface0_ram_bus_we;
wire [2:0] interface0_ram_bus_cti;
wire [1:0] interface0_ram_bus_bte;
reg  interface0_ram_bus_err = 1'd0;
wire [10:0] sram0_adr;
wire [31:0] sram0_dat_r;
reg  [3:0] sram0_we = 4'd0;
wire [31:0] sram0_dat_w;
wire [29:0] interface1_ram_bus_adr;
wire [31:0] interface1_ram_bus_dat_w;
wire [31:0] interface1_ram_bus_dat_r;
wire [3:0] interface1_ram_bus_sel;
wire interface1_ram_bus_cyc;
wire interface1_ram_bus_stb;
reg  interface1_ram_bus_ack = 1'd0;
wire interface1_ram_bus_we;
wire [2:0] interface1_ram_bus_cti;
wire [1:0] interface1_ram_bus_bte;
reg  interface1_ram_bus_err = 1'd0;
wire [11:0] sram1_adr;
wire [31:0] sram1_dat_r;
reg  [3:0] sram1_we = 4'd0;
wire [31:0] sram1_dat_w;
wire tx_sink_valid;
reg  tx_sink_ready = 1'd0;
wire tx_sink_first;
wire tx_sink_last;
wire [7:0] tx_sink_payload_data;
reg  [7:0] tx_data = 8'd0;
reg  [3:0] tx_count = 4'd0;
reg  tx_enable = 1'd0;
reg  tx_tick = 1'd0;
reg  [31:0] tx_phase = 32'd0;
reg  rx_source_valid = 1'd0;
wire rx_source_ready;
reg  rx_source_first = 1'd0;
reg  rx_source_last = 1'd0;
reg  [7:0] rx_source_payload_data = 8'd0;
reg  [7:0] rx_data = 8'd0;
reg  [3:0] rx_count = 4'd0;
reg  rx_enable = 1'd0;
reg  rx_tick = 1'd0;
reg  [31:0] rx_phase = 32'd0;
wire rx_rx;
reg  rx_rx_d = 1'd0;
reg  uart_rxtx_re = 1'd0;
wire [7:0] uart_rxtx_r;
reg  uart_rxtx_we = 1'd0;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg  uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg  uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg  uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg  uart_tx_clear = 1'd0;
reg  uart_tx_trigger_d = 1'd0;
wire uart_rx_status;
reg  uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg  uart_rx_clear = 1'd0;
reg  uart_rx_trigger_d = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg  [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg  uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg  [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg  uart_pending_re = 1'd0;
reg  [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg  [1:0] uart_enable_storage = 2'd0;
reg  uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg  uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg  uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg  uart_tx_fifo_sink_first = 1'd0;
reg  uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg  uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg  [4:0] uart_tx_fifo_level0 = 5'd0;
reg  uart_tx_fifo_replace = 1'd0;
reg  [3:0] uart_tx_fifo_produce = 4'd0;
reg  [3:0] uart_tx_fifo_consume = 4'd0;
reg  [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg  uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg  [4:0] uart_rx_fifo_level0 = 5'd0;
reg  uart_rx_fifo_replace = 1'd0;
reg  [3:0] uart_rx_fifo_produce = 4'd0;
reg  [3:0] uart_rx_fifo_consume = 4'd0;
reg  [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg  [31:0] timer_load_storage = 32'd0;
reg  timer_load_re = 1'd0;
reg  [31:0] timer_reload_storage = 32'd0;
reg  timer_reload_re = 1'd0;
reg  timer_en_storage = 1'd0;
reg  timer_en_re = 1'd0;
reg  timer_update_value_storage = 1'd0;
reg  timer_update_value_re = 1'd0;
reg  [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg  timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg  timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg  timer_zero_clear = 1'd0;
reg  timer_zero_trigger_d = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg  timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg  timer_pending_re = 1'd0;
reg  timer_pending_r = 1'd0;
wire timer_zero2;
reg  timer_enable_storage = 1'd0;
reg  timer_enable_re = 1'd0;
reg  [31:0] timer_value = 32'd0;
wire L_status;
wire L_we;
reg  L_re = 1'd0;
wire LC_status;
wire LC_we;
reg  LC_re = 1'd0;
wire C_status;
wire C_we;
reg  C_re = 1'd0;
wire RC_status;
wire RC_we;
reg  RC_re = 1'd0;
wire R_status;
wire R_we;
reg  R_re = 1'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg  int_rst = 1'd1;
reg  [4:0] leds_storage = 5'd0;
reg  leds_re = 1'd0;
wire [7:0] switchs_status;
wire switchs_we;
reg  switchs_re = 1'd0;
wire [2:0] buttons_status;
wire buttons_we;
reg  buttons_re = 1'd0;
reg  [2:0] dgt_count = 3'd0;
reg  dgt_tick = 1'd0;
reg  [17:0] dgt_tick_count = 18'd0;
wire [7:0] displays0;
wire [7:0] displays1;
wire [7:0] displays2;
wire [7:0] displays3;
wire [7:0] displays4;
wire [7:0] displays5;
wire [7:0] displays6;
wire [7:0] displays7;
reg  [7:0] dig_0_storage = 8'd0;
reg  dig_0_re = 1'd0;
reg  [7:0] dig_1_storage = 8'd0;
reg  dig_1_re = 1'd0;
reg  [7:0] dig_2_storage = 8'd0;
reg  dig_2_re = 1'd0;
reg  [7:0] dig_3_storage = 8'd0;
reg  dig_3_re = 1'd0;
reg  [7:0] dig_4_storage = 8'd0;
reg  dig_4_re = 1'd0;
reg  [7:0] dig_5_storage = 8'd0;
reg  dig_5_re = 1'd0;
reg  [7:0] dig_6_storage = 8'd0;
reg  dig_6_re = 1'd0;
reg  [7:0] dig_7_storage = 8'd0;
reg  dig_7_re = 1'd0;
wire ledRGB_1_r_enable;
wire [31:0] ledRGB_1_r_width;
wire [31:0] ledRGB_1_r_period;
reg  [31:0] ledRGB_1_r_counter = 32'd0;
reg  ledRGB_1_r_enable_storage = 1'd0;
reg  ledRGB_1_r_enable_re = 1'd0;
reg  [31:0] ledRGB_1_r_width_storage = 32'd0;
reg  ledRGB_1_r_width_re = 1'd0;
reg  [31:0] ledRGB_1_r_period_storage = 32'd0;
reg  ledRGB_1_r_period_re = 1'd0;
wire ledRGB_1_g_enable;
wire [31:0] ledRGB_1_g_width;
wire [31:0] ledRGB_1_g_period;
reg  [31:0] ledRGB_1_g_counter = 32'd0;
reg  ledRGB_1_g_enable_storage = 1'd0;
reg  ledRGB_1_g_enable_re = 1'd0;
reg  [31:0] ledRGB_1_g_width_storage = 32'd0;
reg  ledRGB_1_g_width_re = 1'd0;
reg  [31:0] ledRGB_1_g_period_storage = 32'd0;
reg  ledRGB_1_g_period_re = 1'd0;
wire ledRGB_1_b_enable;
wire [31:0] ledRGB_1_b_width;
wire [31:0] ledRGB_1_b_period;
reg  [31:0] ledRGB_1_b_counter = 32'd0;
reg  ledRGB_1_b_enable_storage = 1'd0;
reg  ledRGB_1_b_enable_re = 1'd0;
reg  [31:0] ledRGB_1_b_width_storage = 32'd0;
reg  ledRGB_1_b_width_re = 1'd0;
reg  [31:0] ledRGB_1_b_period_storage = 32'd0;
reg  ledRGB_1_b_period_re = 1'd0;
wire ledRGB_2_r_enable;
wire [31:0] ledRGB_2_r_width;
wire [31:0] ledRGB_2_r_period;
reg  [31:0] ledRGB_2_r_counter = 32'd0;
reg  ledRGB_2_r_enable_storage = 1'd0;
reg  ledRGB_2_r_enable_re = 1'd0;
reg  [31:0] ledRGB_2_r_width_storage = 32'd0;
reg  ledRGB_2_r_width_re = 1'd0;
reg  [31:0] ledRGB_2_r_period_storage = 32'd0;
reg  ledRGB_2_r_period_re = 1'd0;
wire ledRGB_2_g_enable;
wire [31:0] ledRGB_2_g_width;
wire [31:0] ledRGB_2_g_period;
reg  [31:0] ledRGB_2_g_counter = 32'd0;
reg  ledRGB_2_g_enable_storage = 1'd0;
reg  ledRGB_2_g_enable_re = 1'd0;
reg  [31:0] ledRGB_2_g_width_storage = 32'd0;
reg  ledRGB_2_g_width_re = 1'd0;
reg  [31:0] ledRGB_2_g_period_storage = 32'd0;
reg  ledRGB_2_g_period_re = 1'd0;
wire ledRGB_2_b_enable;
wire [31:0] ledRGB_2_b_width;
wire [31:0] ledRGB_2_b_period;
reg  [31:0] ledRGB_2_b_counter = 32'd0;
reg  ledRGB_2_b_enable_storage = 1'd0;
reg  ledRGB_2_b_enable_re = 1'd0;
reg  [31:0] ledRGB_2_b_width_storage = 32'd0;
reg  ledRGB_2_b_width_re = 1'd0;
reg  [31:0] ledRGB_2_b_period_storage = 32'd0;
reg  ledRGB_2_b_period_re = 1'd0;
reg  [9:0] h_count = 10'd0;
reg  [9:0] v_count = 10'd0;
reg  [1:0] pxl_tick_count = 2'd0;
reg  pxl_tick = 1'd0;
wire active;
reg  [18:0] p_r_adr = 19'd0;
wire [11:0] p_r_dat_r;
wire [18:0] p_w_adr;
wire [11:0] p_w_dat_r;
wire p_w_we;
wire [11:0] p_w_dat_w;
reg  [18:0] mem_adr_storage = 19'd0;
reg  mem_adr_re = 1'd0;
reg  mem_we_storage = 1'd0;
reg  mem_we_re = 1'd0;
reg  [11:0] mem_data_w_storage = 12'd0;
reg  mem_data_w_re = 1'd0;
wire [11:0] mem_data_r_status;
wire mem_data_r_we;
reg  mem_data_r_re = 1'd0;
reg  rs232phytx_state = 1'd0;
reg  rs232phytx_next_state = 1'd0;
reg  [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg  tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg  serial_tx_rs232phytx_next_value1 = 1'd0;
reg  serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg  [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg  tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg  rs232phyrx_state = 1'd0;
reg  rs232phyrx_next_state = 1'd0;
reg  [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg  rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg  [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg  rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg  [13:0] basesoc_adr = 14'd0;
reg  basesoc_we = 1'd0;
reg  [31:0] basesoc_dat_w = 32'd0;
wire [31:0] basesoc_dat_r;
wire [29:0] basesoc_wishbone_adr;
wire [31:0] basesoc_wishbone_dat_w;
reg  [31:0] basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_wishbone_sel;
wire basesoc_wishbone_cyc;
wire basesoc_wishbone_stb;
reg  basesoc_wishbone_ack = 1'd0;
wire basesoc_wishbone_we;
wire [2:0] basesoc_wishbone_cti;
wire [1:0] basesoc_wishbone_bte;
reg  basesoc_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg  [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg  shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire [1:0] request;
reg  grant = 1'd0;
reg  [3:0] slave_sel = 4'd0;
reg  [3:0] slave_sel_r = 4'd0;
reg  error = 1'd0;
wire wait_1;
wire done;
reg  [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg  [31:0] interface0_bank_bus_dat_r = 32'd0;
reg  csrbank0_in_re = 1'd0;
wire [2:0] csrbank0_in_r;
reg  csrbank0_in_we = 1'd0;
wire [2:0] csrbank0_in_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg  [31:0] interface1_bank_bus_dat_r = 32'd0;
reg  csrbank1_reset0_re = 1'd0;
wire [1:0] csrbank1_reset0_r;
reg  csrbank1_reset0_we = 1'd0;
wire [1:0] csrbank1_reset0_w;
reg  csrbank1_scratch0_re = 1'd0;
wire [31:0] csrbank1_scratch0_r;
reg  csrbank1_scratch0_we = 1'd0;
wire [31:0] csrbank1_scratch0_w;
reg  csrbank1_bus_errors_re = 1'd0;
wire [31:0] csrbank1_bus_errors_r;
reg  csrbank1_bus_errors_we = 1'd0;
wire [31:0] csrbank1_bus_errors_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [31:0] interface2_bank_bus_dat_w;
reg  [31:0] interface2_bank_bus_dat_r = 32'd0;
reg  csrbank2_dig_00_re = 1'd0;
wire [7:0] csrbank2_dig_00_r;
reg  csrbank2_dig_00_we = 1'd0;
wire [7:0] csrbank2_dig_00_w;
reg  csrbank2_dig_10_re = 1'd0;
wire [7:0] csrbank2_dig_10_r;
reg  csrbank2_dig_10_we = 1'd0;
wire [7:0] csrbank2_dig_10_w;
reg  csrbank2_dig_20_re = 1'd0;
wire [7:0] csrbank2_dig_20_r;
reg  csrbank2_dig_20_we = 1'd0;
wire [7:0] csrbank2_dig_20_w;
reg  csrbank2_dig_30_re = 1'd0;
wire [7:0] csrbank2_dig_30_r;
reg  csrbank2_dig_30_we = 1'd0;
wire [7:0] csrbank2_dig_30_w;
reg  csrbank2_dig_40_re = 1'd0;
wire [7:0] csrbank2_dig_40_r;
reg  csrbank2_dig_40_we = 1'd0;
wire [7:0] csrbank2_dig_40_w;
reg  csrbank2_dig_50_re = 1'd0;
wire [7:0] csrbank2_dig_50_r;
reg  csrbank2_dig_50_we = 1'd0;
wire [7:0] csrbank2_dig_50_w;
reg  csrbank2_dig_60_re = 1'd0;
wire [7:0] csrbank2_dig_60_r;
reg  csrbank2_dig_60_we = 1'd0;
wire [7:0] csrbank2_dig_60_w;
reg  csrbank2_dig_70_re = 1'd0;
wire [7:0] csrbank2_dig_70_r;
reg  csrbank2_dig_70_we = 1'd0;
wire [7:0] csrbank2_dig_70_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [31:0] interface3_bank_bus_dat_w;
reg  [31:0] interface3_bank_bus_dat_r = 32'd0;
reg  csrbank3_L_re = 1'd0;
wire csrbank3_L_r;
reg  csrbank3_L_we = 1'd0;
wire csrbank3_L_w;
reg  csrbank3_LC_re = 1'd0;
wire csrbank3_LC_r;
reg  csrbank3_LC_we = 1'd0;
wire csrbank3_LC_w;
reg  csrbank3_C_re = 1'd0;
wire csrbank3_C_r;
reg  csrbank3_C_we = 1'd0;
wire csrbank3_C_w;
reg  csrbank3_RC_re = 1'd0;
wire csrbank3_RC_r;
reg  csrbank3_RC_we = 1'd0;
wire csrbank3_RC_w;
reg  csrbank3_R_re = 1'd0;
wire csrbank3_R_r;
reg  csrbank3_R_we = 1'd0;
wire csrbank3_R_w;
wire csrbank3_sel;
wire [13:0] interface4_bank_bus_adr;
wire interface4_bank_bus_we;
wire [31:0] interface4_bank_bus_dat_w;
reg  [31:0] interface4_bank_bus_dat_r = 32'd0;
reg  csrbank4_r_enable0_re = 1'd0;
wire csrbank4_r_enable0_r;
reg  csrbank4_r_enable0_we = 1'd0;
wire csrbank4_r_enable0_w;
reg  csrbank4_r_width0_re = 1'd0;
wire [31:0] csrbank4_r_width0_r;
reg  csrbank4_r_width0_we = 1'd0;
wire [31:0] csrbank4_r_width0_w;
reg  csrbank4_r_period0_re = 1'd0;
wire [31:0] csrbank4_r_period0_r;
reg  csrbank4_r_period0_we = 1'd0;
wire [31:0] csrbank4_r_period0_w;
reg  csrbank4_g_enable0_re = 1'd0;
wire csrbank4_g_enable0_r;
reg  csrbank4_g_enable0_we = 1'd0;
wire csrbank4_g_enable0_w;
reg  csrbank4_g_width0_re = 1'd0;
wire [31:0] csrbank4_g_width0_r;
reg  csrbank4_g_width0_we = 1'd0;
wire [31:0] csrbank4_g_width0_w;
reg  csrbank4_g_period0_re = 1'd0;
wire [31:0] csrbank4_g_period0_r;
reg  csrbank4_g_period0_we = 1'd0;
wire [31:0] csrbank4_g_period0_w;
reg  csrbank4_b_enable0_re = 1'd0;
wire csrbank4_b_enable0_r;
reg  csrbank4_b_enable0_we = 1'd0;
wire csrbank4_b_enable0_w;
reg  csrbank4_b_width0_re = 1'd0;
wire [31:0] csrbank4_b_width0_r;
reg  csrbank4_b_width0_we = 1'd0;
wire [31:0] csrbank4_b_width0_w;
reg  csrbank4_b_period0_re = 1'd0;
wire [31:0] csrbank4_b_period0_r;
reg  csrbank4_b_period0_we = 1'd0;
wire [31:0] csrbank4_b_period0_w;
wire csrbank4_sel;
wire [13:0] interface5_bank_bus_adr;
wire interface5_bank_bus_we;
wire [31:0] interface5_bank_bus_dat_w;
reg  [31:0] interface5_bank_bus_dat_r = 32'd0;
reg  csrbank5_r_enable0_re = 1'd0;
wire csrbank5_r_enable0_r;
reg  csrbank5_r_enable0_we = 1'd0;
wire csrbank5_r_enable0_w;
reg  csrbank5_r_width0_re = 1'd0;
wire [31:0] csrbank5_r_width0_r;
reg  csrbank5_r_width0_we = 1'd0;
wire [31:0] csrbank5_r_width0_w;
reg  csrbank5_r_period0_re = 1'd0;
wire [31:0] csrbank5_r_period0_r;
reg  csrbank5_r_period0_we = 1'd0;
wire [31:0] csrbank5_r_period0_w;
reg  csrbank5_g_enable0_re = 1'd0;
wire csrbank5_g_enable0_r;
reg  csrbank5_g_enable0_we = 1'd0;
wire csrbank5_g_enable0_w;
reg  csrbank5_g_width0_re = 1'd0;
wire [31:0] csrbank5_g_width0_r;
reg  csrbank5_g_width0_we = 1'd0;
wire [31:0] csrbank5_g_width0_w;
reg  csrbank5_g_period0_re = 1'd0;
wire [31:0] csrbank5_g_period0_r;
reg  csrbank5_g_period0_we = 1'd0;
wire [31:0] csrbank5_g_period0_w;
reg  csrbank5_b_enable0_re = 1'd0;
wire csrbank5_b_enable0_r;
reg  csrbank5_b_enable0_we = 1'd0;
wire csrbank5_b_enable0_w;
reg  csrbank5_b_width0_re = 1'd0;
wire [31:0] csrbank5_b_width0_r;
reg  csrbank5_b_width0_we = 1'd0;
wire [31:0] csrbank5_b_width0_w;
reg  csrbank5_b_period0_re = 1'd0;
wire [31:0] csrbank5_b_period0_r;
reg  csrbank5_b_period0_we = 1'd0;
wire [31:0] csrbank5_b_period0_w;
wire csrbank5_sel;
wire [13:0] interface6_bank_bus_adr;
wire interface6_bank_bus_we;
wire [31:0] interface6_bank_bus_dat_w;
reg  [31:0] interface6_bank_bus_dat_r = 32'd0;
reg  csrbank6_out0_re = 1'd0;
wire [4:0] csrbank6_out0_r;
reg  csrbank6_out0_we = 1'd0;
wire [4:0] csrbank6_out0_w;
wire csrbank6_sel;
wire [13:0] interface7_bank_bus_adr;
wire interface7_bank_bus_we;
wire [31:0] interface7_bank_bus_dat_w;
reg  [31:0] interface7_bank_bus_dat_r = 32'd0;
reg  csrbank7_in_re = 1'd0;
wire [7:0] csrbank7_in_r;
reg  csrbank7_in_we = 1'd0;
wire [7:0] csrbank7_in_w;
wire csrbank7_sel;
wire [13:0] interface8_bank_bus_adr;
wire interface8_bank_bus_we;
wire [31:0] interface8_bank_bus_dat_w;
reg  [31:0] interface8_bank_bus_dat_r = 32'd0;
reg  csrbank8_load0_re = 1'd0;
wire [31:0] csrbank8_load0_r;
reg  csrbank8_load0_we = 1'd0;
wire [31:0] csrbank8_load0_w;
reg  csrbank8_reload0_re = 1'd0;
wire [31:0] csrbank8_reload0_r;
reg  csrbank8_reload0_we = 1'd0;
wire [31:0] csrbank8_reload0_w;
reg  csrbank8_en0_re = 1'd0;
wire csrbank8_en0_r;
reg  csrbank8_en0_we = 1'd0;
wire csrbank8_en0_w;
reg  csrbank8_update_value0_re = 1'd0;
wire csrbank8_update_value0_r;
reg  csrbank8_update_value0_we = 1'd0;
wire csrbank8_update_value0_w;
reg  csrbank8_value_re = 1'd0;
wire [31:0] csrbank8_value_r;
reg  csrbank8_value_we = 1'd0;
wire [31:0] csrbank8_value_w;
reg  csrbank8_ev_status_re = 1'd0;
wire csrbank8_ev_status_r;
reg  csrbank8_ev_status_we = 1'd0;
wire csrbank8_ev_status_w;
reg  csrbank8_ev_pending_re = 1'd0;
wire csrbank8_ev_pending_r;
reg  csrbank8_ev_pending_we = 1'd0;
wire csrbank8_ev_pending_w;
reg  csrbank8_ev_enable0_re = 1'd0;
wire csrbank8_ev_enable0_r;
reg  csrbank8_ev_enable0_we = 1'd0;
wire csrbank8_ev_enable0_w;
wire csrbank8_sel;
wire [13:0] interface9_bank_bus_adr;
wire interface9_bank_bus_we;
wire [31:0] interface9_bank_bus_dat_w;
reg  [31:0] interface9_bank_bus_dat_r = 32'd0;
reg  csrbank9_txfull_re = 1'd0;
wire csrbank9_txfull_r;
reg  csrbank9_txfull_we = 1'd0;
wire csrbank9_txfull_w;
reg  csrbank9_rxempty_re = 1'd0;
wire csrbank9_rxempty_r;
reg  csrbank9_rxempty_we = 1'd0;
wire csrbank9_rxempty_w;
reg  csrbank9_ev_status_re = 1'd0;
wire [1:0] csrbank9_ev_status_r;
reg  csrbank9_ev_status_we = 1'd0;
wire [1:0] csrbank9_ev_status_w;
reg  csrbank9_ev_pending_re = 1'd0;
wire [1:0] csrbank9_ev_pending_r;
reg  csrbank9_ev_pending_we = 1'd0;
wire [1:0] csrbank9_ev_pending_w;
reg  csrbank9_ev_enable0_re = 1'd0;
wire [1:0] csrbank9_ev_enable0_r;
reg  csrbank9_ev_enable0_we = 1'd0;
wire [1:0] csrbank9_ev_enable0_w;
reg  csrbank9_txempty_re = 1'd0;
wire csrbank9_txempty_r;
reg  csrbank9_txempty_we = 1'd0;
wire csrbank9_txempty_w;
reg  csrbank9_rxfull_re = 1'd0;
wire csrbank9_rxfull_r;
reg  csrbank9_rxfull_we = 1'd0;
wire csrbank9_rxfull_w;
wire csrbank9_sel;
wire [13:0] interface10_bank_bus_adr;
wire interface10_bank_bus_we;
wire [31:0] interface10_bank_bus_dat_w;
reg  [31:0] interface10_bank_bus_dat_r = 32'd0;
reg  csrbank10_mem_adr0_re = 1'd0;
wire [18:0] csrbank10_mem_adr0_r;
reg  csrbank10_mem_adr0_we = 1'd0;
wire [18:0] csrbank10_mem_adr0_w;
reg  csrbank10_mem_we0_re = 1'd0;
wire csrbank10_mem_we0_r;
reg  csrbank10_mem_we0_we = 1'd0;
wire csrbank10_mem_we0_w;
reg  csrbank10_mem_data_w0_re = 1'd0;
wire [11:0] csrbank10_mem_data_w0_r;
reg  csrbank10_mem_data_w0_we = 1'd0;
wire [11:0] csrbank10_mem_data_w0_w;
reg  csrbank10_mem_data_r_re = 1'd0;
wire [11:0] csrbank10_mem_data_r_r;
reg  csrbank10_mem_data_r_we = 1'd0;
wire [11:0] csrbank10_mem_data_r_w;
wire csrbank10_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg  state = 1'd0;
reg  next_state = 1'd0;
reg  [7:0] array_muxed0 = 8'd0;
reg  [29:0] array_muxed1 = 30'd0;
reg  [31:0] array_muxed2 = 32'd0;
reg  [3:0] array_muxed3 = 4'd0;
reg  array_muxed4 = 1'd0;
reg  array_muxed5 = 1'd0;
reg  array_muxed6 = 1'd0;
reg  [2:0] array_muxed7 = 3'd0;
reg  [1:0] array_muxed8 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg  xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  [7:0] xilinxmultiregimpl1_regs0 = 8'd0;
(* async_reg = "true", dont_touch = "true" *) reg  [7:0] xilinxmultiregimpl1_regs1 = 8'd0;
wire xilinxmultiregimpl1;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg  [2:0] xilinxmultiregimpl2_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *) reg  [2:0] xilinxmultiregimpl2_regs1 = 3'd0;
wire xilinxmultiregimpl2;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign bus_error = error;
always @(*) begin
	interrupt <= 32'd0;
	interrupt[1] <= timer_irq;
	interrupt[0] <= uart_irq;
end
assign bus_errors_status = bus_errors;
assign adr = ram_bus_adr[12:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
	sram0_we <= 4'd0;
	sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
	sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
	sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
	sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
	sram1_we <= 4'd0;
	sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
	sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
	sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
	sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[11:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
always @(*) begin
	rs232phytx_next_state <= 1'd0;
	tx_count_rs232phytx_next_value0 <= 4'd0;
	tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	tx_enable <= 1'd0;
	serial_tx_rs232phytx_next_value1 <= 1'd0;
	serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	tx_data_rs232phytx_next_value2 <= 8'd0;
	tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	tx_sink_ready <= 1'd0;
	rs232phytx_next_state <= rs232phytx_state;
	case (rs232phytx_state)
		1'd1: begin
			tx_enable <= 1'd1;
			if (tx_tick) begin
				serial_tx_rs232phytx_next_value1 <= tx_data;
				serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
				tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((tx_count == 4'd9)) begin
					tx_sink_ready <= 1'd1;
					rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			tx_count_rs232phytx_next_value0 <= 1'd0;
			tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			serial_tx_rs232phytx_next_value1 <= 1'd1;
			serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (tx_sink_valid) begin
				serial_tx_rs232phytx_next_value1 <= 1'd0;
				serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	rx_source_valid <= 1'd0;
	rx_source_payload_data <= 8'd0;
	rs232phyrx_next_state <= 1'd0;
	rx_count_rs232phyrx_next_value0 <= 4'd0;
	rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	rx_enable <= 1'd0;
	rx_data_rs232phyrx_next_value1 <= 8'd0;
	rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	rs232phyrx_next_state <= rs232phyrx_state;
	case (rs232phyrx_state)
		1'd1: begin
			rx_enable <= 1'd1;
			if (rx_tick) begin
				rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
				rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
				rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((rx_count == 4'd9)) begin
					rx_source_valid <= (rx_rx == 1'd1);
					rx_source_payload_data <= rx_data;
					rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			rx_count_rs232phyrx_next_value0 <= 1'd0;
			rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
				rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk = clk;
assign por_clk = clk;
assign sys_rst = int_rst;
assign {led4, led3, led2, led1, led0} = leds_storage;
assign displays0 = dig_0_storage;
assign displays1 = dig_1_storage;
assign displays2 = dig_2_storage;
assign displays3 = dig_3_storage;
assign displays4 = dig_4_storage;
assign displays5 = dig_5_storage;
assign displays6 = dig_6_storage;
assign displays7 = dig_7_storage;
assign {display_digit7, display_digit6, display_digit5, display_digit4, display_digit3, display_digit2, display_digit1, display_digit0} = (~(1'd1 <<< dgt_count));
assign {display_segment7, display_segment6, display_segment5, display_segment4, display_segment3, display_segment2, display_segment1, display_segment0} = (~array_muxed0);
assign p_w_adr = mem_adr_storage;
assign p_w_we = mem_we_storage;
assign mem_data_r_status = p_w_dat_r;
assign p_w_dat_w = mem_data_w_storage;
assign hsync = ((h_count >= 10'd656) & (h_count < 10'd752));
assign vsync = ((v_count >= 9'd490) & (v_count < 9'd492));
assign active = ((h_count < 10'd640) & (v_count < 9'd480));
assign {vga_red3, vga_red2, vga_red1, vga_red0} = (active * p_r_dat_r[11:8]);
assign {vga_green3, vga_green2, vga_green1, vga_green0} = (active * p_r_dat_r[7:4]);
assign {vga_blue3, vga_blue2, vga_blue1, vga_blue0} = (active * p_r_dat_r[3:0]);
always @(*) begin
	basesoc_wishbone_ack <= 1'd0;
	basesoc_adr <= 14'd0;
	next_state <= 1'd0;
	basesoc_we <= 1'd0;
	basesoc_dat_w <= 32'd0;
	basesoc_wishbone_dat_r <= 32'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			basesoc_wishbone_ack <= 1'd1;
			basesoc_wishbone_dat_r <= basesoc_dat_r;
			next_state <= 1'd0;
		end
		default: begin
			basesoc_dat_w <= basesoc_wishbone_dat_w;
			if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
				basesoc_adr <= basesoc_wishbone_adr;
				basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
				next_state <= 1'd1;
			end
		end
	endcase
end
assign shared_adr = array_muxed1;
assign shared_dat_w = array_muxed2;
assign shared_sel = array_muxed3;
assign shared_cyc = array_muxed4;
assign shared_stb = array_muxed5;
assign shared_we = array_muxed6;
assign shared_cti = array_muxed7;
assign shared_bte = array_muxed8;
assign ibus_dat_r = shared_dat_r;
assign dbus_dat_r = shared_dat_r;
assign ibus_ack = (shared_ack & (grant == 1'd0));
assign dbus_ack = (shared_ack & (grant == 1'd1));
assign ibus_err = (shared_err & (grant == 1'd0));
assign dbus_err = (shared_err & (grant == 1'd1));
assign request = {dbus_cyc, ibus_cyc};
always @(*) begin
	slave_sel <= 4'd0;
	slave_sel[0] <= (shared_adr[29:13] == 1'd0);
	slave_sel[1] <= (shared_adr[29:11] == 16'd32768);
	slave_sel[2] <= (shared_adr[29:12] == 17'd65536);
	slave_sel[3] <= (shared_adr[29:14] == 16'd61440);
end
assign ram_bus_adr = shared_adr;
assign ram_bus_dat_w = shared_dat_w;
assign ram_bus_sel = shared_sel;
assign ram_bus_stb = shared_stb;
assign ram_bus_we = shared_we;
assign ram_bus_cti = shared_cti;
assign ram_bus_bte = shared_bte;
assign interface0_ram_bus_adr = shared_adr;
assign interface0_ram_bus_dat_w = shared_dat_w;
assign interface0_ram_bus_sel = shared_sel;
assign interface0_ram_bus_stb = shared_stb;
assign interface0_ram_bus_we = shared_we;
assign interface0_ram_bus_cti = shared_cti;
assign interface0_ram_bus_bte = shared_bte;
assign interface1_ram_bus_adr = shared_adr;
assign interface1_ram_bus_dat_w = shared_dat_w;
assign interface1_ram_bus_sel = shared_sel;
assign interface1_ram_bus_stb = shared_stb;
assign interface1_ram_bus_we = shared_we;
assign interface1_ram_bus_cti = shared_cti;
assign interface1_ram_bus_bte = shared_bte;
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign interface0_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign interface1_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | basesoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	error <= 1'd0;
	shared_ack <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | basesoc_wishbone_ack);
	shared_dat_r <= (((({32{slave_sel_r[0]}} & ram_bus_dat_r) | ({32{slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & basesoc_wishbone_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 2'd3);
assign csrbank0_in_r = interface0_bank_bus_dat_w[2:0];
always @(*) begin
	csrbank0_in_we <= 1'd0;
	csrbank0_in_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank0_in_re <= interface0_bank_bus_we;
		csrbank0_in_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_in_w = buttons_status[2:0];
assign buttons_we = csrbank0_in_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 4'd8);
assign csrbank1_reset0_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank1_reset0_we <= 1'd0;
	csrbank1_reset0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank1_reset0_re <= interface1_bank_bus_we;
		csrbank1_reset0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_scratch0_r = interface1_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank1_scratch0_we <= 1'd0;
	csrbank1_scratch0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank1_scratch0_re <= interface1_bank_bus_we;
		csrbank1_scratch0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_bus_errors_r = interface1_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank1_bus_errors_re <= 1'd0;
	csrbank1_bus_errors_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank1_bus_errors_re <= interface1_bank_bus_we;
		csrbank1_bus_errors_we <= (~interface1_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign csrbank1_reset0_w = reset_storage[1:0];
assign csrbank1_scratch0_w = scratch_storage[31:0];
assign csrbank1_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csrbank1_bus_errors_we;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 3'd4);
assign csrbank2_dig_00_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank2_dig_00_re <= 1'd0;
	csrbank2_dig_00_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank2_dig_00_re <= interface2_bank_bus_we;
		csrbank2_dig_00_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_dig_10_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank2_dig_10_re <= 1'd0;
	csrbank2_dig_10_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank2_dig_10_re <= interface2_bank_bus_we;
		csrbank2_dig_10_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_dig_20_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank2_dig_20_we <= 1'd0;
	csrbank2_dig_20_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank2_dig_20_re <= interface2_bank_bus_we;
		csrbank2_dig_20_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_dig_30_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank2_dig_30_re <= 1'd0;
	csrbank2_dig_30_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank2_dig_30_re <= interface2_bank_bus_we;
		csrbank2_dig_30_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_dig_40_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank2_dig_40_we <= 1'd0;
	csrbank2_dig_40_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank2_dig_40_re <= interface2_bank_bus_we;
		csrbank2_dig_40_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_dig_50_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank2_dig_50_we <= 1'd0;
	csrbank2_dig_50_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank2_dig_50_re <= interface2_bank_bus_we;
		csrbank2_dig_50_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_dig_60_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank2_dig_60_re <= 1'd0;
	csrbank2_dig_60_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank2_dig_60_re <= interface2_bank_bus_we;
		csrbank2_dig_60_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_dig_70_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank2_dig_70_we <= 1'd0;
	csrbank2_dig_70_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank2_dig_70_re <= interface2_bank_bus_we;
		csrbank2_dig_70_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_dig_00_w = dig_0_storage[7:0];
assign csrbank2_dig_10_w = dig_1_storage[7:0];
assign csrbank2_dig_20_w = dig_2_storage[7:0];
assign csrbank2_dig_30_w = dig_3_storage[7:0];
assign csrbank2_dig_40_w = dig_4_storage[7:0];
assign csrbank2_dig_50_w = dig_5_storage[7:0];
assign csrbank2_dig_60_w = dig_6_storage[7:0];
assign csrbank2_dig_70_w = dig_7_storage[7:0];
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 1'd0);
assign csrbank3_L_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_L_we <= 1'd0;
	csrbank3_L_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank3_L_re <= interface3_bank_bus_we;
		csrbank3_L_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_LC_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_LC_re <= 1'd0;
	csrbank3_LC_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank3_LC_re <= interface3_bank_bus_we;
		csrbank3_LC_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_C_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_C_re <= 1'd0;
	csrbank3_C_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank3_C_re <= interface3_bank_bus_we;
		csrbank3_C_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_RC_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_RC_we <= 1'd0;
	csrbank3_RC_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank3_RC_re <= interface3_bank_bus_we;
		csrbank3_RC_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_R_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_R_we <= 1'd0;
	csrbank3_R_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank3_R_re <= interface3_bank_bus_we;
		csrbank3_R_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_L_w = L_status;
assign L_we = csrbank3_L_we;
assign csrbank3_LC_w = LC_status;
assign LC_we = csrbank3_LC_we;
assign csrbank3_C_w = C_status;
assign C_we = csrbank3_C_we;
assign csrbank3_RC_w = RC_status;
assign RC_we = csrbank3_RC_we;
assign csrbank3_R_w = R_status;
assign R_we = csrbank3_R_we;
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 3'd5);
assign csrbank4_r_enable0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
	csrbank4_r_enable0_re <= 1'd0;
	csrbank4_r_enable0_we <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank4_r_enable0_re <= interface4_bank_bus_we;
		csrbank4_r_enable0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_r_width0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank4_r_width0_we <= 1'd0;
	csrbank4_r_width0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank4_r_width0_re <= interface4_bank_bus_we;
		csrbank4_r_width0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_r_period0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank4_r_period0_re <= 1'd0;
	csrbank4_r_period0_we <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank4_r_period0_re <= interface4_bank_bus_we;
		csrbank4_r_period0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_g_enable0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
	csrbank4_g_enable0_we <= 1'd0;
	csrbank4_g_enable0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank4_g_enable0_re <= interface4_bank_bus_we;
		csrbank4_g_enable0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_g_width0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank4_g_width0_we <= 1'd0;
	csrbank4_g_width0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank4_g_width0_re <= interface4_bank_bus_we;
		csrbank4_g_width0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_g_period0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank4_g_period0_re <= 1'd0;
	csrbank4_g_period0_we <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank4_g_period0_re <= interface4_bank_bus_we;
		csrbank4_g_period0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_b_enable0_r = interface4_bank_bus_dat_w[0];
always @(*) begin
	csrbank4_b_enable0_we <= 1'd0;
	csrbank4_b_enable0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank4_b_enable0_re <= interface4_bank_bus_we;
		csrbank4_b_enable0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_b_width0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank4_b_width0_re <= 1'd0;
	csrbank4_b_width0_we <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank4_b_width0_re <= interface4_bank_bus_we;
		csrbank4_b_width0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_b_period0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank4_b_period0_re <= 1'd0;
	csrbank4_b_period0_we <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank4_b_period0_re <= interface4_bank_bus_we;
		csrbank4_b_period0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_r_enable0_w = ledRGB_1_r_enable_storage;
assign csrbank4_r_width0_w = ledRGB_1_r_width_storage[31:0];
assign csrbank4_r_period0_w = ledRGB_1_r_period_storage[31:0];
assign csrbank4_g_enable0_w = ledRGB_1_g_enable_storage;
assign csrbank4_g_width0_w = ledRGB_1_g_width_storage[31:0];
assign csrbank4_g_period0_w = ledRGB_1_g_period_storage[31:0];
assign csrbank4_b_enable0_w = ledRGB_1_b_enable_storage;
assign csrbank4_b_width0_w = ledRGB_1_b_width_storage[31:0];
assign csrbank4_b_period0_w = ledRGB_1_b_period_storage[31:0];
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd6);
assign csrbank5_r_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_r_enable0_we <= 1'd0;
	csrbank5_r_enable0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank5_r_enable0_re <= interface5_bank_bus_we;
		csrbank5_r_enable0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_r_width0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_r_width0_we <= 1'd0;
	csrbank5_r_width0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank5_r_width0_re <= interface5_bank_bus_we;
		csrbank5_r_width0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_r_period0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_r_period0_re <= 1'd0;
	csrbank5_r_period0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank5_r_period0_re <= interface5_bank_bus_we;
		csrbank5_r_period0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_g_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_g_enable0_we <= 1'd0;
	csrbank5_g_enable0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank5_g_enable0_re <= interface5_bank_bus_we;
		csrbank5_g_enable0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_g_width0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_g_width0_re <= 1'd0;
	csrbank5_g_width0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank5_g_width0_re <= interface5_bank_bus_we;
		csrbank5_g_width0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_g_period0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_g_period0_re <= 1'd0;
	csrbank5_g_period0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank5_g_period0_re <= interface5_bank_bus_we;
		csrbank5_g_period0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_b_enable0_r = interface5_bank_bus_dat_w[0];
always @(*) begin
	csrbank5_b_enable0_we <= 1'd0;
	csrbank5_b_enable0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank5_b_enable0_re <= interface5_bank_bus_we;
		csrbank5_b_enable0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_b_width0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_b_width0_re <= 1'd0;
	csrbank5_b_width0_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank5_b_width0_re <= interface5_bank_bus_we;
		csrbank5_b_width0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_b_period0_r = interface5_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank5_b_period0_we <= 1'd0;
	csrbank5_b_period0_re <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank5_b_period0_re <= interface5_bank_bus_we;
		csrbank5_b_period0_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_r_enable0_w = ledRGB_2_r_enable_storage;
assign csrbank5_r_width0_w = ledRGB_2_r_width_storage[31:0];
assign csrbank5_r_period0_w = ledRGB_2_r_period_storage[31:0];
assign csrbank5_g_enable0_w = ledRGB_2_g_enable_storage;
assign csrbank5_g_width0_w = ledRGB_2_g_width_storage[31:0];
assign csrbank5_g_period0_w = ledRGB_2_g_period_storage[31:0];
assign csrbank5_b_enable0_w = ledRGB_2_b_enable_storage;
assign csrbank5_b_width0_w = ledRGB_2_b_width_storage[31:0];
assign csrbank5_b_period0_w = ledRGB_2_b_period_storage[31:0];
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 1'd1);
assign csrbank6_out0_r = interface6_bank_bus_dat_w[4:0];
always @(*) begin
	csrbank6_out0_we <= 1'd0;
	csrbank6_out0_re <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank6_out0_re <= interface6_bank_bus_we;
		csrbank6_out0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_out0_w = leds_storage[4:0];
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 2'd2);
assign csrbank7_in_r = interface7_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank7_in_we <= 1'd0;
	csrbank7_in_re <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank7_in_re <= interface7_bank_bus_we;
		csrbank7_in_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_in_w = switchs_status[7:0];
assign switchs_we = csrbank7_in_we;
assign csrbank8_sel = (interface8_bank_bus_adr[13:9] == 4'd9);
assign csrbank8_load0_r = interface8_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank8_load0_we <= 1'd0;
	csrbank8_load0_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank8_load0_re <= interface8_bank_bus_we;
		csrbank8_load0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_reload0_r = interface8_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank8_reload0_re <= 1'd0;
	csrbank8_reload0_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank8_reload0_re <= interface8_bank_bus_we;
		csrbank8_reload0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_en0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_en0_we <= 1'd0;
	csrbank8_en0_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank8_en0_re <= interface8_bank_bus_we;
		csrbank8_en0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_update_value0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_update_value0_we <= 1'd0;
	csrbank8_update_value0_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank8_update_value0_re <= interface8_bank_bus_we;
		csrbank8_update_value0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_value_r = interface8_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank8_value_re <= 1'd0;
	csrbank8_value_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank8_value_re <= interface8_bank_bus_we;
		csrbank8_value_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_status_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_status_we <= 1'd0;
	csrbank8_ev_status_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank8_ev_status_re <= interface8_bank_bus_we;
		csrbank8_ev_status_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_pending_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_pending_we <= 1'd0;
	csrbank8_ev_pending_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank8_ev_pending_re <= interface8_bank_bus_we;
		csrbank8_ev_pending_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_enable0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_enable0_re <= 1'd0;
	csrbank8_ev_enable0_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank8_ev_enable0_re <= interface8_bank_bus_we;
		csrbank8_ev_enable0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_load0_w = timer_load_storage[31:0];
assign csrbank8_reload0_w = timer_reload_storage[31:0];
assign csrbank8_en0_w = timer_en_storage;
assign csrbank8_update_value0_w = timer_update_value_storage;
assign csrbank8_value_w = timer_value_status[31:0];
assign timer_value_we = csrbank8_value_we;
assign timer_status_status = timer_zero0;
assign csrbank8_ev_status_w = timer_status_status;
assign timer_status_we = csrbank8_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csrbank8_ev_pending_w = timer_pending_status;
assign timer_pending_we = csrbank8_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csrbank8_ev_enable0_w = timer_enable_storage;
assign csrbank9_sel = (interface9_bank_bus_adr[13:9] == 4'd10);
assign uart_rxtx_r = interface9_bank_bus_dat_w[7:0];
always @(*) begin
	uart_rxtx_we <= 1'd0;
	uart_rxtx_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_re <= interface9_bank_bus_we;
		uart_rxtx_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_txfull_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_txfull_re <= 1'd0;
	csrbank9_txfull_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank9_txfull_re <= interface9_bank_bus_we;
		csrbank9_txfull_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_rxempty_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_rxempty_we <= 1'd0;
	csrbank9_rxempty_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank9_rxempty_re <= interface9_bank_bus_we;
		csrbank9_rxempty_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_status_r = interface9_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank9_ev_status_we <= 1'd0;
	csrbank9_ev_status_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank9_ev_status_re <= interface9_bank_bus_we;
		csrbank9_ev_status_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_pending_r = interface9_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank9_ev_pending_re <= 1'd0;
	csrbank9_ev_pending_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank9_ev_pending_re <= interface9_bank_bus_we;
		csrbank9_ev_pending_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_enable0_r = interface9_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank9_ev_enable0_we <= 1'd0;
	csrbank9_ev_enable0_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank9_ev_enable0_re <= interface9_bank_bus_we;
		csrbank9_ev_enable0_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_txempty_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_txempty_we <= 1'd0;
	csrbank9_txempty_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank9_txempty_re <= interface9_bank_bus_we;
		csrbank9_txempty_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_rxfull_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_rxfull_re <= 1'd0;
	csrbank9_rxfull_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank9_rxfull_re <= interface9_bank_bus_we;
		csrbank9_rxfull_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbank9_txfull_we;
assign csrbank9_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbank9_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign csrbank9_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csrbank9_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign csrbank9_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csrbank9_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csrbank9_ev_enable0_w = uart_enable_storage[1:0];
assign csrbank9_txempty_w = uart_txempty_status;
assign uart_txempty_we = csrbank9_txempty_we;
assign csrbank9_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csrbank9_rxfull_we;
assign csrbank10_sel = (interface10_bank_bus_adr[13:9] == 3'd7);
assign csrbank10_mem_adr0_r = interface10_bank_bus_dat_w[18:0];
always @(*) begin
	csrbank10_mem_adr0_re <= 1'd0;
	csrbank10_mem_adr0_we <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank10_mem_adr0_re <= interface10_bank_bus_we;
		csrbank10_mem_adr0_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_mem_we0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_mem_we0_we <= 1'd0;
	csrbank10_mem_we0_re <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank10_mem_we0_re <= interface10_bank_bus_we;
		csrbank10_mem_we0_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_mem_data_w0_r = interface10_bank_bus_dat_w[11:0];
always @(*) begin
	csrbank10_mem_data_w0_re <= 1'd0;
	csrbank10_mem_data_w0_we <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank10_mem_data_w0_re <= interface10_bank_bus_we;
		csrbank10_mem_data_w0_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_mem_data_r_r = interface10_bank_bus_dat_w[11:0];
always @(*) begin
	csrbank10_mem_data_r_re <= 1'd0;
	csrbank10_mem_data_r_we <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank10_mem_data_r_re <= interface10_bank_bus_we;
		csrbank10_mem_data_r_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_mem_adr0_w = mem_adr_storage[18:0];
assign csrbank10_mem_we0_w = mem_we_storage;
assign csrbank10_mem_data_w0_w = mem_data_w_storage[11:0];
assign csrbank10_mem_data_r_w = mem_data_r_status[11:0];
assign mem_data_r_we = csrbank10_mem_data_r_we;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface4_bank_bus_adr = csr_interconnect_adr;
assign interface5_bank_bus_adr = csr_interconnect_adr;
assign interface6_bank_bus_adr = csr_interconnect_adr;
assign interface7_bank_bus_adr = csr_interconnect_adr;
assign interface8_bank_bus_adr = csr_interconnect_adr;
assign interface9_bank_bus_adr = csr_interconnect_adr;
assign interface10_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface4_bank_bus_we = csr_interconnect_we;
assign interface5_bank_bus_we = csr_interconnect_we;
assign interface6_bank_bus_we = csr_interconnect_we;
assign interface7_bank_bus_we = csr_interconnect_we;
assign interface8_bank_bus_we = csr_interconnect_we;
assign interface9_bank_bus_we = csr_interconnect_we;
assign interface10_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface9_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface10_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r) | interface8_bank_bus_dat_r) | interface9_bank_bus_dat_r) | interface10_bank_bus_dat_r);
always @(*) begin
	array_muxed0 <= 8'd0;
	case (dgt_count)
		1'd0: begin
			array_muxed0 <= displays0;
		end
		1'd1: begin
			array_muxed0 <= displays1;
		end
		2'd2: begin
			array_muxed0 <= displays2;
		end
		2'd3: begin
			array_muxed0 <= displays3;
		end
		3'd4: begin
			array_muxed0 <= displays4;
		end
		3'd5: begin
			array_muxed0 <= displays5;
		end
		3'd6: begin
			array_muxed0 <= displays6;
		end
		default: begin
			array_muxed0 <= displays7;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 30'd0;
	case (grant)
		1'd0: begin
			array_muxed1 <= ibus_adr;
		end
		default: begin
			array_muxed1 <= dbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 32'd0;
	case (grant)
		1'd0: begin
			array_muxed2 <= ibus_dat_w;
		end
		default: begin
			array_muxed2 <= dbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 4'd0;
	case (grant)
		1'd0: begin
			array_muxed3 <= ibus_sel;
		end
		default: begin
			array_muxed3 <= dbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed4 <= ibus_cyc;
		end
		default: begin
			array_muxed4 <= dbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed5 <= ibus_stb;
		end
		default: begin
			array_muxed5 <= dbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed6 <= ibus_we;
		end
		default: begin
			array_muxed6 <= dbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 3'd0;
	case (grant)
		1'd0: begin
			array_muxed7 <= ibus_cti;
		end
		default: begin
			array_muxed7 <= dbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed8 <= 2'd0;
	case (grant)
		1'd0: begin
			array_muxed8 <= ibus_bte;
		end
		default: begin
			array_muxed8 <= dbus_bte;
		end
	endcase
end
assign rx_rx = xilinxmultiregimpl0_regs1;
assign switchs_status = xilinxmultiregimpl1_regs1;
assign xilinxmultiregimpl1 = {sw7, sw6, sw5, sw4, sw3, sw2, sw1, sw0};
assign buttons_status = xilinxmultiregimpl2_regs1;
assign xilinxmultiregimpl2 = {btnl, btnr, btnc};
assign ledRGB_1_r_enable = ledRGB_1_r_enable_storage;
assign ledRGB_1_r_width = ledRGB_1_r_width_storage;
assign ledRGB_1_r_period = ledRGB_1_r_period_storage;
assign ledRGB_1_g_enable = ledRGB_1_g_enable_storage;
assign ledRGB_1_g_width = ledRGB_1_g_width_storage;
assign ledRGB_1_g_period = ledRGB_1_g_period_storage;
assign ledRGB_1_b_enable = ledRGB_1_b_enable_storage;
assign ledRGB_1_b_width = ledRGB_1_b_width_storage;
assign ledRGB_1_b_period = ledRGB_1_b_period_storage;
assign ledRGB_2_r_enable = ledRGB_2_r_enable_storage;
assign ledRGB_2_r_width = ledRGB_2_r_width_storage;
assign ledRGB_2_r_period = ledRGB_2_r_period_storage;
assign ledRGB_2_g_enable = ledRGB_2_g_enable_storage;
assign ledRGB_2_g_width = ledRGB_2_g_width_storage;
assign ledRGB_2_g_period = ledRGB_2_g_period_storage;
assign ledRGB_2_b_enable = ledRGB_2_b_enable_storage;
assign ledRGB_2_b_width = ledRGB_2_b_width_storage;
assign ledRGB_2_b_period = ledRGB_2_b_period_storage;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	int_rst <= (~cpu_reset);
end

always @(posedge sys_clk) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & (~ram_bus_ack))) begin
		ram_bus_ack <= 1'd1;
	end
	interface0_ram_bus_ack <= 1'd0;
	if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & (~interface0_ram_bus_ack))) begin
		interface0_ram_bus_ack <= 1'd1;
	end
	interface1_ram_bus_ack <= 1'd0;
	if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & (~interface1_ram_bus_ack))) begin
		interface1_ram_bus_ack <= 1'd1;
	end
	{tx_tick, tx_phase} <= 23'd4947802;
	if (tx_enable) begin
		{tx_tick, tx_phase} <= (tx_phase + 23'd4947802);
	end
	rs232phytx_state <= rs232phytx_next_state;
	if (tx_count_rs232phytx_next_value_ce0) begin
		tx_count <= tx_count_rs232phytx_next_value0;
	end
	if (serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= serial_tx_rs232phytx_next_value1;
	end
	if (tx_data_rs232phytx_next_value_ce2) begin
		tx_data <= tx_data_rs232phytx_next_value2;
	end
	rx_rx_d <= rx_rx;
	{rx_tick, rx_phase} <= 32'd2147483648;
	if (rx_enable) begin
		{rx_tick, rx_phase} <= (rx_phase + 23'd4947802);
	end
	rs232phyrx_state <= rs232phyrx_next_state;
	if (rx_count_rs232phyrx_next_value_ce0) begin
		rx_count <= rx_count_rs232phyrx_next_value0;
	end
	if (rx_data_rs232phyrx_next_value_ce1) begin
		rx_data <= rx_data_rs232phyrx_next_value1;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_trigger_d <= uart_tx_trigger;
	if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_trigger_d <= uart_rx_trigger;
	if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_trigger_d <= timer_zero_trigger;
	if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
		timer_zero_pending <= 1'd1;
	end
	if ((dgt_tick_count >= 18'd199999)) begin
		dgt_tick_count <= 1'd0;
		dgt_tick <= 1'd1;
	end else begin
		dgt_tick_count <= (dgt_tick_count + 1'd1);
		dgt_tick <= 1'd0;
	end
	if (dgt_tick) begin
		if ((dgt_count >= 3'd7)) begin
			dgt_count <= 1'd0;
		end else begin
			dgt_count <= (dgt_count + 1'd1);
		end
	end
	if (ledRGB_1_r_enable) begin
		ledRGB_1_r_counter <= (ledRGB_1_r_counter + 1'd1);
		if ((ledRGB_1_r_counter < ledRGB_1_r_width)) begin
			ledRGB1_r <= 1'd1;
		end else begin
			ledRGB1_r <= 1'd0;
		end
		if ((ledRGB_1_r_counter >= (ledRGB_1_r_period - 1'd1))) begin
			ledRGB_1_r_counter <= 1'd0;
		end
	end else begin
		ledRGB_1_r_counter <= 1'd0;
		ledRGB1_r <= 1'd0;
	end
	if (ledRGB_1_g_enable) begin
		ledRGB_1_g_counter <= (ledRGB_1_g_counter + 1'd1);
		if ((ledRGB_1_g_counter < ledRGB_1_g_width)) begin
			ledRGB1_g <= 1'd1;
		end else begin
			ledRGB1_g <= 1'd0;
		end
		if ((ledRGB_1_g_counter >= (ledRGB_1_g_period - 1'd1))) begin
			ledRGB_1_g_counter <= 1'd0;
		end
	end else begin
		ledRGB_1_g_counter <= 1'd0;
		ledRGB1_g <= 1'd0;
	end
	if (ledRGB_1_b_enable) begin
		ledRGB_1_b_counter <= (ledRGB_1_b_counter + 1'd1);
		if ((ledRGB_1_b_counter < ledRGB_1_b_width)) begin
			ledRGB1_b <= 1'd1;
		end else begin
			ledRGB1_b <= 1'd0;
		end
		if ((ledRGB_1_b_counter >= (ledRGB_1_b_period - 1'd1))) begin
			ledRGB_1_b_counter <= 1'd0;
		end
	end else begin
		ledRGB_1_b_counter <= 1'd0;
		ledRGB1_b <= 1'd0;
	end
	if (ledRGB_2_r_enable) begin
		ledRGB_2_r_counter <= (ledRGB_2_r_counter + 1'd1);
		if ((ledRGB_2_r_counter < ledRGB_2_r_width)) begin
			ledRGB2_r <= 1'd1;
		end else begin
			ledRGB2_r <= 1'd0;
		end
		if ((ledRGB_2_r_counter >= (ledRGB_2_r_period - 1'd1))) begin
			ledRGB_2_r_counter <= 1'd0;
		end
	end else begin
		ledRGB_2_r_counter <= 1'd0;
		ledRGB2_r <= 1'd0;
	end
	if (ledRGB_2_g_enable) begin
		ledRGB_2_g_counter <= (ledRGB_2_g_counter + 1'd1);
		if ((ledRGB_2_g_counter < ledRGB_2_g_width)) begin
			ledRGB2_g <= 1'd1;
		end else begin
			ledRGB2_g <= 1'd0;
		end
		if ((ledRGB_2_g_counter >= (ledRGB_2_g_period - 1'd1))) begin
			ledRGB_2_g_counter <= 1'd0;
		end
	end else begin
		ledRGB_2_g_counter <= 1'd0;
		ledRGB2_g <= 1'd0;
	end
	if (ledRGB_2_b_enable) begin
		ledRGB_2_b_counter <= (ledRGB_2_b_counter + 1'd1);
		if ((ledRGB_2_b_counter < ledRGB_2_b_width)) begin
			ledRGB2_b <= 1'd1;
		end else begin
			ledRGB2_b <= 1'd0;
		end
		if ((ledRGB_2_b_counter >= (ledRGB_2_b_period - 1'd1))) begin
			ledRGB_2_b_counter <= 1'd0;
		end
	end else begin
		ledRGB_2_b_counter <= 1'd0;
		ledRGB2_b <= 1'd0;
	end
	if ((pxl_tick_count >= 2'd3)) begin
		pxl_tick_count <= 1'd0;
		pxl_tick <= 1'd1;
	end else begin
		pxl_tick_count <= (pxl_tick_count + 1'd1);
		pxl_tick <= 1'd0;
	end
	if (pxl_tick) begin
		if ((h_count >= 10'd799)) begin
			h_count <= 1'd0;
			if ((v_count >= 10'd524)) begin
				v_count <= 1'd0;
			end else begin
				v_count <= (v_count + 1'd1);
			end
		end else begin
			h_count <= (h_count + 1'd1);
		end
	end
	p_r_adr <= ((v_count * 10'd640) + h_count);
	state <= next_state;
	case (grant)
		1'd0: begin
			if ((~request[0])) begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~request[1])) begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		end
	endcase
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[8:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_in_w;
			end
		endcase
	end
	buttons_re <= csrbank0_in_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[8:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_reset0_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_scratch0_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_bus_errors_w;
			end
		endcase
	end
	if (csrbank1_reset0_re) begin
		reset_storage[1:0] <= csrbank1_reset0_r;
	end
	reset_re <= csrbank1_reset0_re;
	if (csrbank1_scratch0_re) begin
		scratch_storage[31:0] <= csrbank1_scratch0_r;
	end
	scratch_re <= csrbank1_scratch0_re;
	bus_errors_re <= csrbank1_bus_errors_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[8:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_dig_00_w;
			end
			1'd1: begin
				interface2_bank_bus_dat_r <= csrbank2_dig_10_w;
			end
			2'd2: begin
				interface2_bank_bus_dat_r <= csrbank2_dig_20_w;
			end
			2'd3: begin
				interface2_bank_bus_dat_r <= csrbank2_dig_30_w;
			end
			3'd4: begin
				interface2_bank_bus_dat_r <= csrbank2_dig_40_w;
			end
			3'd5: begin
				interface2_bank_bus_dat_r <= csrbank2_dig_50_w;
			end
			3'd6: begin
				interface2_bank_bus_dat_r <= csrbank2_dig_60_w;
			end
			3'd7: begin
				interface2_bank_bus_dat_r <= csrbank2_dig_70_w;
			end
		endcase
	end
	if (csrbank2_dig_00_re) begin
		dig_0_storage[7:0] <= csrbank2_dig_00_r;
	end
	dig_0_re <= csrbank2_dig_00_re;
	if (csrbank2_dig_10_re) begin
		dig_1_storage[7:0] <= csrbank2_dig_10_r;
	end
	dig_1_re <= csrbank2_dig_10_re;
	if (csrbank2_dig_20_re) begin
		dig_2_storage[7:0] <= csrbank2_dig_20_r;
	end
	dig_2_re <= csrbank2_dig_20_re;
	if (csrbank2_dig_30_re) begin
		dig_3_storage[7:0] <= csrbank2_dig_30_r;
	end
	dig_3_re <= csrbank2_dig_30_re;
	if (csrbank2_dig_40_re) begin
		dig_4_storage[7:0] <= csrbank2_dig_40_r;
	end
	dig_4_re <= csrbank2_dig_40_re;
	if (csrbank2_dig_50_re) begin
		dig_5_storage[7:0] <= csrbank2_dig_50_r;
	end
	dig_5_re <= csrbank2_dig_50_re;
	if (csrbank2_dig_60_re) begin
		dig_6_storage[7:0] <= csrbank2_dig_60_r;
	end
	dig_6_re <= csrbank2_dig_60_re;
	if (csrbank2_dig_70_re) begin
		dig_7_storage[7:0] <= csrbank2_dig_70_r;
	end
	dig_7_re <= csrbank2_dig_70_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[8:0])
			1'd0: begin
				interface3_bank_bus_dat_r <= csrbank3_L_w;
			end
			1'd1: begin
				interface3_bank_bus_dat_r <= csrbank3_LC_w;
			end
			2'd2: begin
				interface3_bank_bus_dat_r <= csrbank3_C_w;
			end
			2'd3: begin
				interface3_bank_bus_dat_r <= csrbank3_RC_w;
			end
			3'd4: begin
				interface3_bank_bus_dat_r <= csrbank3_R_w;
			end
		endcase
	end
	L_re <= csrbank3_L_re;
	LC_re <= csrbank3_LC_re;
	C_re <= csrbank3_C_re;
	RC_re <= csrbank3_RC_re;
	R_re <= csrbank3_R_re;
	interface4_bank_bus_dat_r <= 1'd0;
	if (csrbank4_sel) begin
		case (interface4_bank_bus_adr[8:0])
			1'd0: begin
				interface4_bank_bus_dat_r <= csrbank4_r_enable0_w;
			end
			1'd1: begin
				interface4_bank_bus_dat_r <= csrbank4_r_width0_w;
			end
			2'd2: begin
				interface4_bank_bus_dat_r <= csrbank4_r_period0_w;
			end
			2'd3: begin
				interface4_bank_bus_dat_r <= csrbank4_g_enable0_w;
			end
			3'd4: begin
				interface4_bank_bus_dat_r <= csrbank4_g_width0_w;
			end
			3'd5: begin
				interface4_bank_bus_dat_r <= csrbank4_g_period0_w;
			end
			3'd6: begin
				interface4_bank_bus_dat_r <= csrbank4_b_enable0_w;
			end
			3'd7: begin
				interface4_bank_bus_dat_r <= csrbank4_b_width0_w;
			end
			4'd8: begin
				interface4_bank_bus_dat_r <= csrbank4_b_period0_w;
			end
		endcase
	end
	if (csrbank4_r_enable0_re) begin
		ledRGB_1_r_enable_storage <= csrbank4_r_enable0_r;
	end
	ledRGB_1_r_enable_re <= csrbank4_r_enable0_re;
	if (csrbank4_r_width0_re) begin
		ledRGB_1_r_width_storage[31:0] <= csrbank4_r_width0_r;
	end
	ledRGB_1_r_width_re <= csrbank4_r_width0_re;
	if (csrbank4_r_period0_re) begin
		ledRGB_1_r_period_storage[31:0] <= csrbank4_r_period0_r;
	end
	ledRGB_1_r_period_re <= csrbank4_r_period0_re;
	if (csrbank4_g_enable0_re) begin
		ledRGB_1_g_enable_storage <= csrbank4_g_enable0_r;
	end
	ledRGB_1_g_enable_re <= csrbank4_g_enable0_re;
	if (csrbank4_g_width0_re) begin
		ledRGB_1_g_width_storage[31:0] <= csrbank4_g_width0_r;
	end
	ledRGB_1_g_width_re <= csrbank4_g_width0_re;
	if (csrbank4_g_period0_re) begin
		ledRGB_1_g_period_storage[31:0] <= csrbank4_g_period0_r;
	end
	ledRGB_1_g_period_re <= csrbank4_g_period0_re;
	if (csrbank4_b_enable0_re) begin
		ledRGB_1_b_enable_storage <= csrbank4_b_enable0_r;
	end
	ledRGB_1_b_enable_re <= csrbank4_b_enable0_re;
	if (csrbank4_b_width0_re) begin
		ledRGB_1_b_width_storage[31:0] <= csrbank4_b_width0_r;
	end
	ledRGB_1_b_width_re <= csrbank4_b_width0_re;
	if (csrbank4_b_period0_re) begin
		ledRGB_1_b_period_storage[31:0] <= csrbank4_b_period0_r;
	end
	ledRGB_1_b_period_re <= csrbank4_b_period0_re;
	interface5_bank_bus_dat_r <= 1'd0;
	if (csrbank5_sel) begin
		case (interface5_bank_bus_adr[8:0])
			1'd0: begin
				interface5_bank_bus_dat_r <= csrbank5_r_enable0_w;
			end
			1'd1: begin
				interface5_bank_bus_dat_r <= csrbank5_r_width0_w;
			end
			2'd2: begin
				interface5_bank_bus_dat_r <= csrbank5_r_period0_w;
			end
			2'd3: begin
				interface5_bank_bus_dat_r <= csrbank5_g_enable0_w;
			end
			3'd4: begin
				interface5_bank_bus_dat_r <= csrbank5_g_width0_w;
			end
			3'd5: begin
				interface5_bank_bus_dat_r <= csrbank5_g_period0_w;
			end
			3'd6: begin
				interface5_bank_bus_dat_r <= csrbank5_b_enable0_w;
			end
			3'd7: begin
				interface5_bank_bus_dat_r <= csrbank5_b_width0_w;
			end
			4'd8: begin
				interface5_bank_bus_dat_r <= csrbank5_b_period0_w;
			end
		endcase
	end
	if (csrbank5_r_enable0_re) begin
		ledRGB_2_r_enable_storage <= csrbank5_r_enable0_r;
	end
	ledRGB_2_r_enable_re <= csrbank5_r_enable0_re;
	if (csrbank5_r_width0_re) begin
		ledRGB_2_r_width_storage[31:0] <= csrbank5_r_width0_r;
	end
	ledRGB_2_r_width_re <= csrbank5_r_width0_re;
	if (csrbank5_r_period0_re) begin
		ledRGB_2_r_period_storage[31:0] <= csrbank5_r_period0_r;
	end
	ledRGB_2_r_period_re <= csrbank5_r_period0_re;
	if (csrbank5_g_enable0_re) begin
		ledRGB_2_g_enable_storage <= csrbank5_g_enable0_r;
	end
	ledRGB_2_g_enable_re <= csrbank5_g_enable0_re;
	if (csrbank5_g_width0_re) begin
		ledRGB_2_g_width_storage[31:0] <= csrbank5_g_width0_r;
	end
	ledRGB_2_g_width_re <= csrbank5_g_width0_re;
	if (csrbank5_g_period0_re) begin
		ledRGB_2_g_period_storage[31:0] <= csrbank5_g_period0_r;
	end
	ledRGB_2_g_period_re <= csrbank5_g_period0_re;
	if (csrbank5_b_enable0_re) begin
		ledRGB_2_b_enable_storage <= csrbank5_b_enable0_r;
	end
	ledRGB_2_b_enable_re <= csrbank5_b_enable0_re;
	if (csrbank5_b_width0_re) begin
		ledRGB_2_b_width_storage[31:0] <= csrbank5_b_width0_r;
	end
	ledRGB_2_b_width_re <= csrbank5_b_width0_re;
	if (csrbank5_b_period0_re) begin
		ledRGB_2_b_period_storage[31:0] <= csrbank5_b_period0_r;
	end
	ledRGB_2_b_period_re <= csrbank5_b_period0_re;
	interface6_bank_bus_dat_r <= 1'd0;
	if (csrbank6_sel) begin
		case (interface6_bank_bus_adr[8:0])
			1'd0: begin
				interface6_bank_bus_dat_r <= csrbank6_out0_w;
			end
		endcase
	end
	if (csrbank6_out0_re) begin
		leds_storage[4:0] <= csrbank6_out0_r;
	end
	leds_re <= csrbank6_out0_re;
	interface7_bank_bus_dat_r <= 1'd0;
	if (csrbank7_sel) begin
		case (interface7_bank_bus_adr[8:0])
			1'd0: begin
				interface7_bank_bus_dat_r <= csrbank7_in_w;
			end
		endcase
	end
	switchs_re <= csrbank7_in_re;
	interface8_bank_bus_dat_r <= 1'd0;
	if (csrbank8_sel) begin
		case (interface8_bank_bus_adr[8:0])
			1'd0: begin
				interface8_bank_bus_dat_r <= csrbank8_load0_w;
			end
			1'd1: begin
				interface8_bank_bus_dat_r <= csrbank8_reload0_w;
			end
			2'd2: begin
				interface8_bank_bus_dat_r <= csrbank8_en0_w;
			end
			2'd3: begin
				interface8_bank_bus_dat_r <= csrbank8_update_value0_w;
			end
			3'd4: begin
				interface8_bank_bus_dat_r <= csrbank8_value_w;
			end
			3'd5: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_status_w;
			end
			3'd6: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_pending_w;
			end
			3'd7: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_enable0_w;
			end
		endcase
	end
	if (csrbank8_load0_re) begin
		timer_load_storage[31:0] <= csrbank8_load0_r;
	end
	timer_load_re <= csrbank8_load0_re;
	if (csrbank8_reload0_re) begin
		timer_reload_storage[31:0] <= csrbank8_reload0_r;
	end
	timer_reload_re <= csrbank8_reload0_re;
	if (csrbank8_en0_re) begin
		timer_en_storage <= csrbank8_en0_r;
	end
	timer_en_re <= csrbank8_en0_re;
	if (csrbank8_update_value0_re) begin
		timer_update_value_storage <= csrbank8_update_value0_r;
	end
	timer_update_value_re <= csrbank8_update_value0_re;
	timer_value_re <= csrbank8_value_re;
	timer_status_re <= csrbank8_ev_status_re;
	if (csrbank8_ev_pending_re) begin
		timer_pending_r <= csrbank8_ev_pending_r;
	end
	timer_pending_re <= csrbank8_ev_pending_re;
	if (csrbank8_ev_enable0_re) begin
		timer_enable_storage <= csrbank8_ev_enable0_r;
	end
	timer_enable_re <= csrbank8_ev_enable0_re;
	interface9_bank_bus_dat_r <= 1'd0;
	if (csrbank9_sel) begin
		case (interface9_bank_bus_adr[8:0])
			1'd0: begin
				interface9_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				interface9_bank_bus_dat_r <= csrbank9_txfull_w;
			end
			2'd2: begin
				interface9_bank_bus_dat_r <= csrbank9_rxempty_w;
			end
			2'd3: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_status_w;
			end
			3'd4: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_pending_w;
			end
			3'd5: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_enable0_w;
			end
			3'd6: begin
				interface9_bank_bus_dat_r <= csrbank9_txempty_w;
			end
			3'd7: begin
				interface9_bank_bus_dat_r <= csrbank9_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= csrbank9_txfull_re;
	uart_rxempty_re <= csrbank9_rxempty_re;
	uart_status_re <= csrbank9_ev_status_re;
	if (csrbank9_ev_pending_re) begin
		uart_pending_r[1:0] <= csrbank9_ev_pending_r;
	end
	uart_pending_re <= csrbank9_ev_pending_re;
	if (csrbank9_ev_enable0_re) begin
		uart_enable_storage[1:0] <= csrbank9_ev_enable0_r;
	end
	uart_enable_re <= csrbank9_ev_enable0_re;
	uart_txempty_re <= csrbank9_txempty_re;
	uart_rxfull_re <= csrbank9_rxfull_re;
	interface10_bank_bus_dat_r <= 1'd0;
	if (csrbank10_sel) begin
		case (interface10_bank_bus_adr[8:0])
			1'd0: begin
				interface10_bank_bus_dat_r <= csrbank10_mem_adr0_w;
			end
			1'd1: begin
				interface10_bank_bus_dat_r <= csrbank10_mem_we0_w;
			end
			2'd2: begin
				interface10_bank_bus_dat_r <= csrbank10_mem_data_w0_w;
			end
			2'd3: begin
				interface10_bank_bus_dat_r <= csrbank10_mem_data_r_w;
			end
		endcase
	end
	if (csrbank10_mem_adr0_re) begin
		mem_adr_storage[18:0] <= csrbank10_mem_adr0_r;
	end
	mem_adr_re <= csrbank10_mem_adr0_re;
	if (csrbank10_mem_we0_re) begin
		mem_we_storage <= csrbank10_mem_we0_r;
	end
	mem_we_re <= csrbank10_mem_we0_re;
	if (csrbank10_mem_data_w0_re) begin
		mem_data_w_storage[11:0] <= csrbank10_mem_data_w0_r;
	end
	mem_data_w_re <= csrbank10_mem_data_w0_re;
	mem_data_r_re <= csrbank10_mem_data_r_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		ram_bus_ack <= 1'd0;
		interface0_ram_bus_ack <= 1'd0;
		interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		tx_tick <= 1'd0;
		rx_tick <= 1'd0;
		rx_rx_d <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_trigger_d <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_trigger_d <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_trigger_d <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		L_re <= 1'd0;
		LC_re <= 1'd0;
		C_re <= 1'd0;
		RC_re <= 1'd0;
		R_re <= 1'd0;
		leds_storage <= 5'd0;
		leds_re <= 1'd0;
		switchs_re <= 1'd0;
		buttons_re <= 1'd0;
		dgt_count <= 3'd0;
		dgt_tick <= 1'd0;
		dgt_tick_count <= 18'd0;
		dig_0_storage <= 8'd0;
		dig_0_re <= 1'd0;
		dig_1_storage <= 8'd0;
		dig_1_re <= 1'd0;
		dig_2_storage <= 8'd0;
		dig_2_re <= 1'd0;
		dig_3_storage <= 8'd0;
		dig_3_re <= 1'd0;
		dig_4_storage <= 8'd0;
		dig_4_re <= 1'd0;
		dig_5_storage <= 8'd0;
		dig_5_re <= 1'd0;
		dig_6_storage <= 8'd0;
		dig_6_re <= 1'd0;
		dig_7_storage <= 8'd0;
		dig_7_re <= 1'd0;
		ledRGB1_r <= 1'd0;
		ledRGB1_g <= 1'd0;
		ledRGB1_b <= 1'd0;
		ledRGB_1_r_enable_storage <= 1'd0;
		ledRGB_1_r_enable_re <= 1'd0;
		ledRGB_1_r_width_re <= 1'd0;
		ledRGB_1_r_period_re <= 1'd0;
		ledRGB_1_g_enable_storage <= 1'd0;
		ledRGB_1_g_enable_re <= 1'd0;
		ledRGB_1_g_width_re <= 1'd0;
		ledRGB_1_g_period_re <= 1'd0;
		ledRGB_1_b_enable_storage <= 1'd0;
		ledRGB_1_b_enable_re <= 1'd0;
		ledRGB_1_b_width_re <= 1'd0;
		ledRGB_1_b_period_re <= 1'd0;
		ledRGB2_r <= 1'd0;
		ledRGB2_g <= 1'd0;
		ledRGB2_b <= 1'd0;
		ledRGB_2_r_enable_storage <= 1'd0;
		ledRGB_2_r_enable_re <= 1'd0;
		ledRGB_2_r_width_re <= 1'd0;
		ledRGB_2_r_period_re <= 1'd0;
		ledRGB_2_g_enable_storage <= 1'd0;
		ledRGB_2_g_enable_re <= 1'd0;
		ledRGB_2_g_width_re <= 1'd0;
		ledRGB_2_g_period_re <= 1'd0;
		ledRGB_2_b_enable_storage <= 1'd0;
		ledRGB_2_b_enable_re <= 1'd0;
		ledRGB_2_b_width_re <= 1'd0;
		ledRGB_2_b_period_re <= 1'd0;
		h_count <= 10'd0;
		v_count <= 10'd0;
		pxl_tick_count <= 2'd0;
		pxl_tick <= 1'd0;
		p_r_adr <= 19'd0;
		mem_adr_storage <= 19'd0;
		mem_adr_re <= 1'd0;
		mem_we_storage <= 1'd0;
		mem_we_re <= 1'd0;
		mem_data_w_storage <= 12'd0;
		mem_data_w_re <= 1'd0;
		mem_data_r_re <= 1'd0;
		rs232phytx_state <= 1'd0;
		rs232phyrx_state <= 1'd0;
		grant <= 1'd0;
		slave_sel_r <= 4'd0;
		count <= 20'd1000000;
		state <= 1'd0;
	end
	xilinxmultiregimpl0_regs0 <= serial_rx;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl1_regs0 <= {sw7, sw6, sw5, sw4, sw3, sw2, sw1, sw0};
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
	xilinxmultiregimpl2_regs0 <= {btnl, btnr, btnc};
	xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory mem: 5305-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] mem[0:5304];
initial begin
	$readmemh("mem.init", mem);
end
reg [31:0] mem_dat0;
always @(posedge sys_clk) begin
	mem_dat0 <= mem[adr];
end
assign dat_r = mem_dat0;


//------------------------------------------------------------------------------
// Memory mem_1: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_1[0:2047];
initial begin
	$readmemh("mem_1.init", mem_1);
end
reg [10:0] mem_1_adr0;
always @(posedge sys_clk) begin
	if (sram0_we[0])
		mem_1[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		mem_1[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		mem_1[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		mem_1[sram0_adr][31:24] <= sram0_dat_w[31:24];
	mem_1_adr0 <= sram0_adr;
end
assign sram0_dat_r = mem_1[mem_1_adr0];


//------------------------------------------------------------------------------
// Memory mem_2: 4096-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] mem_2[0:4095];
initial begin
	$readmemh("mem_2.init", mem_2);
end
reg [11:0] mem_2_adr0;
always @(posedge sys_clk) begin
	if (sram1_we[0])
		mem_2[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		mem_2[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		mem_2[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		mem_2[sram1_adr][31:24] <= sram1_dat_w[31:24];
	mem_2_adr0 <= sram1_adr;
end
assign sram1_dat_r = mem_2[mem_2_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[uart_tx_fifo_rdport_adr];
end
assign uart_tx_fifo_wrport_dat_r = storage_dat0;
assign uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[uart_rx_fifo_rdport_adr];
end
assign uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign uart_rx_fifo_rdport_dat_r = storage_1_dat1;


infrarrojo infrarrojo(
	.iC(iC),
	.iL(iL),
	.iLC(iLC),
	.iR(iR),
	.iRC(iRC),
	.C(C_status),
	.L(L_status),
	.LC(LC_status),
	.R(R_status),
	.RC(RC_status)
);

//------------------------------------------------------------------------------
// Memory mem_3: 307200-words x 12-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
// Port 1 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 12 
reg [11:0] mem_3[0:307199];
reg [18:0] mem_3_adr0;
reg [18:0] mem_3_adr1;
always @(posedge sys_clk) begin
	mem_3_adr0 <= p_r_adr;
end
always @(posedge sys_clk) begin
	if (p_w_we)
		mem_3[p_w_adr] <= p_w_dat_w;
	mem_3_adr1 <= p_w_adr;
end
assign p_r_dat_r = mem_3[mem_3_adr0];
assign p_w_dat_r = mem_3[mem_3_adr1];


VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(dbus_ack),
	.dBusWishbone_DAT_MISO(dbus_dat_r),
	.dBusWishbone_ERR(dbus_err),
	.externalInterruptArray(interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(ibus_ack),
	.iBusWishbone_DAT_MISO(ibus_dat_r),
	.iBusWishbone_ERR(ibus_err),
	.reset((sys_rst | reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(dbus_adr),
	.dBusWishbone_BTE(dbus_bte),
	.dBusWishbone_CTI(dbus_cti),
	.dBusWishbone_CYC(dbus_cyc),
	.dBusWishbone_DAT_MOSI(dbus_dat_w),
	.dBusWishbone_SEL(dbus_sel),
	.dBusWishbone_STB(dbus_stb),
	.dBusWishbone_WE(dbus_we),
	.iBusWishbone_ADR(ibus_adr),
	.iBusWishbone_BTE(ibus_bte),
	.iBusWishbone_CTI(ibus_cti),
	.iBusWishbone_CYC(ibus_cyc),
	.iBusWishbone_DAT_MOSI(ibus_dat_w),
	.iBusWishbone_SEL(ibus_sel),
	.iBusWishbone_STB(ibus_stb),
	.iBusWishbone_WE(ibus_we)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-02-07 15:16:15.
//------------------------------------------------------------------------------
